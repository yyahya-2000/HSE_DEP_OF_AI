server {
  listen [::]:80;
  listen      80;
  server_name  ${WEB_DOMAIN} www.${WEB_DOMAIN};
  if ($request_method !~ ^(GET|POST)$ ) {
      return 444;
  }

  # Redirect all non-https requests
  rewrite ^ https://$host$request_uri? permanent;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    client_max_body_size 100M;
    if ($request_method !~ ^(GET|POST)$ ) {
        return 444;
    }

    set $wanted_domain_name ${WEB_DOMAIN};
    if ($http_host != $wanted_domain_name) {
        return 444;
    }

    access_log  /var/log/nginx/site.log;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers   on;
    ssl_session_cache shared:SSL:10m;

    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; ";
    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    #add_header Content-Security-Policy "default-src 'self'; font-src 'self' maxcdn.bootstrapcdn.com; img-src data: *; style-src 'unsafe-inline' 'self' maxcdn.bootstrapcdn.com; script-src 'unsafe-inline' 'self' www.gstatic.com www.google.com code.jquery.com; frame-src 'self' yandex.ru www.google.com www.youtube.com;frame-ancestors 'self';";
    add_header Content-Security-Policy "default-src 'self' data: 'unsafe-inline' *; frame-ancestors 'self';";

    ssl_dhparam /etc/nginx/crt/dhparam.pem;
    ssl_ecdh_curve secp384r1;

    # Certificate(s) and private key
    ssl_certificate /etc/nginx/crt/${SSL_CERTIFICATE};
    ssl_certificate_key /etc/nginx/crt/${SSL_KEY};

    server_name  ${WEB_DOMAIN} www.${WEB_DOMAIN};

    index index.html;

    root /var/www/front;

    location ~* ^/.well-known/ {
        allow all;
    }
    location ~ (^|/)\. {
        return 403;
    }

    location / {
       try_files $uri $uri/ /index.html;
    }

    location ~ ^/((en|ru)/)?(index.php|update.php|system|editor|batch|entity_reference_autocomplete|admin|user|core|modules|sites|front|api|devel|taxonomy/term/[0-9]+/(edit|translations|delete)|comment/[0-9]+/(edit|translations|delete)|node/(add|[0-9]+/(edit|translations|delete))) {
        root /var/www/html;
        index index.php index.html;
        try_files $uri $uri/ /index.php$is_args$args;

        #Disable cors policy
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';


        location ~* \.(txt|log)$ {
            #allow 192.168.0.0/16;
            deny all;
        }

        location ~ \..*/.*\.php$ {
            return 403;
        }

        # Block access to scripts in site files directory
        location ~ ^/sites/[^/]+/files/.*\.php$ {
            deny all;
        }

        # Block access to scripts in site files directory
        location ~ ^/files/.*\.php$ {
            deny all;
        }

        # Don't allow direct access to PHP files in the vendor directory.
        location ~ /vendor/.*\.php$ {
            deny all;
            return 404;
        }

        # Protect files and directories from prying eyes.
        location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock)|web\.config)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
            deny all;
            return 404;
        }

        location ~ '\.php$|^/update.php' {
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            # Ensure the php file exists. Mitigates CVE-2019-11043
            try_files $fastcgi_script_name =404;
            # Security note: If you're running a version of PHP older than the
            # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
            # See http://serverfault.com/q/627903/94922 for details.
            include fastcgi_params;
            # Block httpoxy attacks. See https://httpoxy.org/.
            fastcgi_param HTTP_PROXY "";
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_param QUERY_STRING $query_string;
            fastcgi_intercept_errors on;
            fastcgi_pass php:9000;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
          try_files $uri @rewrite;
          log_not_found off;
          expires max;
          add_header Cache-Control "public";
        }

        # Enforce clean URLs
        # Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
        # Could be done with 301 for permanent or other redirect codes.
        if ($request_uri ~* "^(.*/)index\.php/(.*)") {
           return 307 $1$2;
        }

    }

    location @rewrite {
       rewrite ^ /index.php;
    }

    rewrite ^/core/authorize.php/core/authorize.php(.*)$ /core/authorize.php$1;

    location ~ /\.ht {
        deny all;
    }

    location = /favicon.ico {
        log_not_found off; access_log off;
    }
    location = /robots.txt {
        log_not_found off; access_log off; allow all;
    }
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
       try_files $uri @rewrite;
       log_not_found off;
       expires max;
       add_header Cache-Control "public";
    }
}